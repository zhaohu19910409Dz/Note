C++线程池原理及创建
 
1：为什么需要线程池
	目前的大多数网络服务器，包括Web服务器，Email服务器以及数据库服务器等都具有一个共同点，就是单位时间内必须处理数据巨大的连接请求，但处理时间却相对较短。
	传统多线程方案中我们采用的服务器模型则是一旦接受到请求之后，即创建一个新的线程，由该线程执行任务。任务执行完毕后，线程退出，这就是“即时创建，即时销毁”的策略。尽管与创建进程相比，创建线程的时间已经大大缩短，但是如果提交给线程的任务是执行时间较短，而且执行次数极其频繁，那么服务器将处于不停的创建线程，销毁线程的状态。

	我们将传统的方案中的线程执行过程分为三个过程:T1,T2,T3.
	T1:线程创建时间
	T2:线程执行时间，包括线程的同步等时间
	T3:线程销毁时间
	那么我们可以看出，线程本身的开销所占的比例为(T1+T3)/(T1+T2+T3).如果线程执行的时间很短的话，这个开销可能占到20%-50%左右。如果任务执行时间很频繁，这笔开销是不可以忽略的。

	除此之外，线程池能够减少创建的线程个数。通常线程池所允许的并发线程是有上界的，如果同时需要并发的线程数超过上界，那么一部分线程将会等待。而传统方案中，如果同时请求数目为2000，那么最坏情况下，系统可能需要产生2000个线程。尽管这不是一个很大的数目，但是也有部分机器可能达不到这种要求。
	因此线程池的出现正是着眼与减少线程池本身的开销。线程池采用预创建的技术，在应用程序启动之后，将立即创建一定数量的线程(N1),放入空闲队列中。这些线程都是处于阻塞(Suspended)状态，不消耗CPU，但占用较小的内存空间。当任务到来后，缓冲池选择一个空闲线程，把任务传入此线程中运行。当N1个线程都在处理任务后，缓冲池自动创建一定数量的新线程，用于处理更多的任务。在任务执行完毕后线程也不退出，而是继续保持在池中等待下一次的任务。当系统比较空闲时，大部分线程都一直处于暂停状态，线程池自动销毁一部分线程，回收系统资源。

2：构建线程池框架
一般线程池都必须具备下面组成部分:

	线程池管理器：用于创建并管理线程池
	工作线程：线程池中实际执行的线程
	任务接口:尽管线程池大多数情况下是用来支持网络服务器，但是我们将线程执行的任务抽象出来，形成任务接口，从而是的线程池与具体的任务无关。
	任务队列:线程池的概念具体到实现则可以是队列，链表之类的数据结构，其中保存执行线程。

	我们实现的通用线程池框架由五个重要部分组成CThreadManage, CThreadPool, CThread, CJob, CWorkerThread,除此之外框架中还包括线程同步使用的类CThreadMutex和CCondition.

	CJob:所有任务的基类，其提供一个借口Run，所有的任务都必须从给类继承，同时实现Run方法。该方法中实现具体的任务逻辑。
	CThread:是Linux中线程的包装，其封装了Linux线程最经常使用的属性和方法，它也是一个抽象类，是所有线程类的基类，具有一个借口Run。
	CWorkerThead:是实际被调度和执行的线程类，其从CThread继承而来，实现了CThread中的Run方法。
	CThreadPool：是线程池类，其负责保存线程，释放线程以及调度线程。
	CThreadManager:是线程池与用户的直接接口,其屏蔽了内部的具体实现。
	CThreadMutex:用于线程之间的互斥
	CCondition：则是条件变量的封装，用于线程之间的同步。

	线程池的时序很简单。CThreadManager直接跟客户端打交道，其接受需要创建的线程初始个数，并接受客户端提交的任务。这儿的任务是具体的非抽象的任务。CThreadManager的内部实际上调用的都是CThreadPool的相关操作。CThreadPool创建集体的线程，并把客户端提交的任务分发给CWorkerThread,CWorkerThread实际执行具体的任务。

3：理解系统组件
	CThreadManager
		class CThreadManger
		{
		private:
			CThreadPool*	m_Pool;
			int				m_NumOfThread;
		protected:
		public:
			void			SetParallelNum(int num);
			CThreadManager();
			CThreadManager(int num);
			virtual ~CThreadManager();

			void Run(CJob* job, void* jobdata);
			void TerminateAll(void);			
		}
		其中m_Pool指向实际的线程池；m_NumOfThread是初始创建时候允许创建的并发的线程个数。另外Run和TerminateAll方法也非常简单，这是简单的调用CThreadPool的一些相关方法而已。其具体的实现如下：
		CThreadManager::CThreadManager()
		{
			m_NumOfThread = 10;
			m_Pool = new CThreadPool(m_NumOfThread);
		}
		CThreadManager::CThreadManager(int num)
		{
		}

