1：关于VR畸变的一些知识积累：
	http://1503c8fb.wiz03.com/share/s/0l0YzX1SH4om2LW6_-2h9BlL2W7pMZ1PgQgB2jFHe638SsvC
2：值得一看的个人博客
	http://blog.csdn.net/dabenxiong666/article/details/77720480
3：ShaderToy
	ShaderToy是一个计算机图形方面的在线的学习,交流平台.在这个平台上使用GLSL语言(语法跟C很像,如果你学习过C语言,操作它基本没什么问题)就能画出很漂亮的渲染效果.你可以在官网上看到人分享的链接(包含源码). 
	这里分享两个ShaderToy上调试可能需要的链接:
	1):GLSL4.5的语法规范https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.50.pdf
	2):ShaderToy使用教程
	https://gamedevelopment.tutsplus.com/tutorials/a-beginners-guide-to-coding-graphics-shaders--cms-23313

	
	
	shader:
		Gradient:
 
		void mainImage( out vec4 fragColor, in vec2 fragCoord )
		{
			vec2 xy = fragCoord.xy; //We obtain our coordinates for the current pixel
			xy.x = xy.x / iResolution.x; //We divide the coordinates by the screen size
			xy.y = xy.y / iResolution.y;
			// Now x is 0 for the leftmost pixel, and 1 for the rightmost pixel
			vec4 solidRed = vec4(0,0.0,0.0,1.0); //This is actually black right now
			 solidRed.r = xy.x; //Set its red component to the normalized x value
			fragColor = solidRed;
		}
		
		Drawing Images:
		
		void mainImage( out vec4 fragColor, in vec2 fragCoord )
		{
			vec2 xy = fragCoord.xy / iResolution.xy;//Condensing this into one line
			vec4 texColor = texture(iChannel0,xy);//Get the pixel at xy from iChannel0
			fragColor = texColor;//Set the screen pixel to that color
		}
		
		Adding Some Movement:
		
		void mainImage( out vec4 fragColor, in vec2 fragCoord )
		{
			vec2 xy = fragCoord.xy / iResolution.xy; // Condensing this into one line
			vec4 texColor = texture(iChannel0,xy); // Get the pixel at xy from iChannel0
			   texColor.r *= abs(sin(iGlobalTime));
			texColor.g *= abs(cos(iGlobalTime));
			texColor.b *= abs(sin(iGlobalTime) * cos(iGlobalTime));
			fragColor = texColor; // Set the screen pixel to that color
		}
		
		
	VR畸变算法:
	//这里假设畸变中心的坐标是(0.5,0.5)
	//计算的公式来自这个视频:https://www.youtube.com/watch?v=B7qrgrrHry0&feature=youtu.be和Wikipedia的畸变校正算法:https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction
	rr = sqrt((fU - 0.5f)*(fU - 0.5f) + (fV - 0.5f)*(fV - 0.5f));
	r2 = rr * (1 + K1*(rr*rr) + K2*(rr*rr*rr*rr));
	theta = atan2(fU-0.5f, fV-0.5f);
	//图像经过畸变后会明显的变小,需要在这里乘以放大系数,来充满整个屏幕.
	hX = sin(theta)*r2*1.0;
	hY = cos(theta)*r2*1.0;
	
	代码如下:
	void mainImage( out vec4 fragColor, in vec2 fragCoord ) {

		//If you have any questions, you can send me Email:helenhololens@gmail.com

		//get source_uv 
		vec2 source_uv = fragCoord.xy / iResolution.xy;
		//assume your distortion center coordinate is (0.5,0.5),you can use your distortion center instead.
		vec2 distortion_center = vec2(0.5,0.5);
		//Define algorithm dependent variables 
		float distortion_x,distortion_y,rr,r2,theta;
		//define distortion coefficient K1 and K2 ,In most cases we can only adjust K1. then K2 parameters can be adjusted more perfect Effect
		//iGlobalTime is used for Real-time change.
		//K1 < 0 is pincushion distortion
		//K1 >=0 is barrel distortion
		float distortion_k1 = 1.0 * sin(iGlobalTime*0.5),distortion_k2 = 0.5;
		vec2 dest_uv;

		//--------------------------Algorithm Start----------------------------------------
		//The formula is derived from this video:https://www.youtube.com/watch?v=B7qrgrrHry0&feature=youtu.be
		//and Distortion correction algorithm for Wikipedia:https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction
		rr = sqrt((source_uv.x - distortion_center.x)*(source_uv.x - distortion_center.x) + (source_uv.y - distortion_center.y)*(source_uv.y - distortion_center.y));
		r2 = rr * (1.0 + distortion_k1*(rr*rr) + distortion_k2*(rr*rr*rr*rr));
		theta = atan(source_uv.x - distortion_center.x, source_uv.y - distortion_center.y);
		distortion_x = sin(theta) * r2 * 1.0;//1.0 is  scale factor
		distortion_y = cos(theta) * r2 * 1.0;//1.0 is  scale factor
		dest_uv.x = distortion_x + 0.5;
		dest_uv.y = distortion_y + 0.5;
		//--------------------------Algorithm End------------------------------------------  

		//Get texture from Channel0,and set dest_uv.
		fragColor = vec4( texture( iChannel0, dest_uv).r, texture( iChannel0,dest_uv).g,texture( iChannel0,dest_uv).b, 1. );

	}
	
	上面的代码中畸变参数K1,K2是畸变调节的参数,想要效果好就根据畸变算法所示那样,叠加到Kn,多数情况下调整K1是能够满足需求的.”float distortion_k1 = 1.0 * sin(iGlobalTime*0.5)”这里的”iGlobalTime”是一个全局的时间变量,是为了让画面有动态效果,如果只想要做反畸变,可以把K1直接设置为0.5(这个值在项目中是要根据光学镜片的畸变来调整de,有一些辅助工具可以帮助获得这个值),就能看到”桶”型的反畸变效果: 

 