DirectX3D 初始化
目标：
	1：理解Direct3D在3D硬件编程找那个的角色。
	2：理解Direct3D中的Com接口
	3：学习基本的图形概念，例如2D图像的存储，翻转，深度缓冲和多重采样
	4：学习如何使用性能计数器功能获取高分辨计数器读数
	5：如何初始化Direct3D
	6：熟悉本书中Demo的应用框架中的常用结构

4.1 前文
	Direct3D初始化过程需要我们熟悉一些基本的图形概念和Direct3D类型。我们介绍在下面介绍这些思路和类型，以至于我们不会再下一节中离题。
	4.1.1
		Direct3D是一个我们可以使用3D硬件加速来渲染3D世界的底层图形API。Direct3D提供可软件接口使得我们可以控制图形硬件。例如,通知图形硬件清空渲染目标（比如屏幕),我们可以调用Direct3D方法ID3D11DeviceContext::ClearRenderTargetView.重要它是一个Direct3D功能的设备，我们就不用担心位于应用程序和图形硬件之间的Direct3D层。
		一个Direct3D11功能的图形设备必须支持全部的Direct3D 11 功能设置。这个和Direct3D 9相比较，它只需要支持Direct3D 9的一个子集；因此，如果一个Direct3D 9应用程序想要使用一个特性，它必须首先这个图形硬件是否支持这个特性，如果不支持将会导致失败。在Direct3D 11，设备能力检测不再是必须的因为它目前严格的要求Direct3D设备实现全部的Direct3D性能集。
	4.1.2 COM接口
		组件对象模型(COM)是允许DirectX成为一种独立编程语言和回退兼容性的技术。我们通常引用一个COM对象作为一个接口，我们的目标是能够将他向C++类一样的使用。当我们使用C++进行DirectX编程的时候很多细节被隐藏了。我们所需要知道的唯一事情是我们通过特定的函数获取指向COM接口的指针或者通过其他COM接口-我们不使用C++的new来关键字创建COM接口。另外当我们使用完成后我们使用Relase方法来删除它而不是使用delete，COM对象由他们自己管理内存。
		当然，因此更多COM，但是更多的细节是不必要的当使用DirectX。
	4.1.3 纹理和数据资源格式
		一个2D纹理是一个数据元素的矩阵。一个2D纹理用来存储2D图形数据，纹理中的每个元素存储一个像素颜色，这个不是唯一用途；例如，一个高级技术叫做普通映射，每一个纹理元素存储一个3D向量代替一个颜色。
		一些格式如下：
		1:DXGI_FORMAT_R32G32B32_FLOAT:每个元素有三个32位浮点组件
		2:DXGI_FORMAT_R16G16B16A16_UNORM:每个元素有16bit组件映射到[0-1]区间
		3:DXGI_FORMAT_R32G32_UINT:每个元素有2个32bit无符号整形组件
		4:DXGI_FORMAT_R8G8B8A8_UNORM:每个元素有4个8bit无符号组件映射到[0-1]区间
		5:DXGI_FORMAT_R8G8B8A8_SNORM:每个元素有4个8bit无符号组件映射到[-1-1]区间		
		6:DXGI_FORMAT_R8G8B8A8_UINT:每个元素有4个8bit无符号组件映射到[0,255]区间
	4.1.4 交换连和页面翻转
		为了避免画面闪烁，最好是讲一个完整的帧动画填充在一个叫做后台缓存的离屏区域。

	4.1.5 深度缓存
		1：DXGI_FORAMT_D32_FLAOT_S8X24_UINT:指定那个32bit浮点深度缓存，和8bit（无符号整形)预留给模板缓冲区映射到[0-255]范围并且24bit不用于填充。
		2：DXGI_FORMAT_D32_FLAOT：指定一个32bit浮点缓冲区。
		3：DXGI_FORMAT_D24_UNORM_S8_UINT:指定一个无符号24位深度缓冲区映射到[0,1]范围和8bit预留给深度缓存区映射到【0,255】
		4：DXGI_FORMAT_D16_UNORM:指定一个无符号16bit深度缓冲区映射到【0,1】范围。

	4.1.6 纹理资源视图
		