chapter 24
	24.1 fork(),exit(),wait()以及execve()简介
		（1）：系统调用fork()允许一进程（父进程）创建一新进程（子进程）。
		（2）：库函数exit(status)终止一进程，将进程占用的所有资源（内存，文件描述符等等)归还内核，交其进行再次分配。
		（3）：系统调用wait(&status)的目的有二：其一，如果子进程尚未调用exit()终止，那么wait()会挂起父进程直至子进程终止；其二，子进程的终止状态通过wait()的status参数返回。
		（4）：系统调用execve(pathname, argv, envp)加载一个新程序：路径名(pathname),参数列表(argv),环境变量列表为(envp)到当前进程的内存。

	24.2 创建新进程fork()
		#include <unistd.h>
		pid_t fork(void);

		24.2.1 父子进程间的文件共享
			执行fork()时，子进程会获得父进程所有文件描述符的副本。这些副本的创建方式类似于dup(),这也意味着父子进程中对应的描述符均指向相同的打开文件句柄。
		24.2.2 fork()的内存语义
	
	24.3 系统调用vfork()
		类似于fork(),vfork()可以为调用进程创建一个新的子进程。然而,vfork()是为子进程立即执行exec()的程序而专门设计的。
		#include <unistd.h>
		pid_t vfork(void);
		与fork的区别：
		（1）：无需为子进程复制虚拟内存页和页表。
		（2）：在子进程调用exec()或_exit()之前，将暂停执行父进程。

	24.4 fork()之后的竞争条件(race condition)
	24.5 同步信号以规避竞争条件
		
		